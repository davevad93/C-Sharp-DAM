// DAVIDE PRESTI
// - Ejercicio 4 -
// Crea un programa a partir del siguiente diagrama de clases en UML
// La aplicaciÃ³n permitirÃ¡ recoger datos de una cuenta bancaria. DeberÃ¡s crear los siguientes
// mÃ©todos y comprobar que funcionan correctamente. Prueba la aplicaciÃ³n con mÃ¡s de un
// nÃºmero de cuenta y captura las posibles excepciones en el programa principal.
// El constructor NumeroCuenta recibirÃ¡ un string con el nÃºmero de cuenta completo y si este
// no se corresponde con un nÃºmero de cuenta correcto se lanzara una excepciÃ³n
// NumeroCuentaIncorrectoException . Esta excepciÃ³n se puede lanzar por dos motivos:
// 1. Porque no cumple el patrÃ³n de un nÃºmero de cuenta (para ello llamarÃ¡ al mÃ©todo
// formatoCorrecto)
// 2. Porque la cuenta no se corresponde con los dÃ­gitos de control (en este caso usara
// dcCorrecto).
// El mÃ©todo privado de NumeroDeCuenta , formatoCorrecto . ComprobarÃ¡ el formato del
// nÃºmero de cuenta con expresiones regulares y si el formato es correcto rellenarÃ¡ los
// campos del objeto. En caso contrario lanzarÃ¡ una excepciÃ³n
// NumeroCuentaIncorrectoException , indicando que el formato de la cuenta no cumple las
// condiciones necesarias.
// El mÃ©todo privado dcCorrecto , comprobarÃ¡ si el dÃ­gito de control corresponde a la
// cuenta, devolviendo false en caso contrario. Para ver como se hace esto, consulta la
// Nota y la Pista posterior.
// El mÃ©todo Reintegro , lanzarÃ¡ una exception SaldoInsuficienteException , cuando se
// intente retirar una cantidad y no haya suficiente saldo.
// El cÃ³digo cuenta corriente es un nÃºmero de 20 cifras. Las 4 primeras de la izquierda
// identifican a la Entidad, las 4 siguientes, la Sucursal, luego vienen 2 dÃ­gitos de control y las
// 10 Ãºltimas corresponden al nÃºmero de la cuenta corriente.
// El primero es el dÃ­gito de control de Entidad/Sucursal.
// El segundo es el dÃ­gito de control del nÃºmero de la cuenta corriente.
// El siguiente ejemplo nos enseÃ±arÃ¡ a calcularlosâ€¦
// Supongamos ahora 2085 el cÃ³digo de una hipotÃ©tica entidad y 0103 el cÃ³digo de una de sus
// sucursales.
// Para calcular el dÃ­gito de control de Entidad/Sucursal:
// Realizaremos la operaciÃ³n:
// 2*4 + 0*8 + 8*5 + 5*10 + 0*9 + 1*7 + 0*3 + 3*6 = 123
// Es decir, cada una de las cifras de la entidad, seguidas de la sucursal, se han ido
// multiplicando por los nÃºmeros del array de ponderaciones 4, 8, 5, 10, 9, 7, 3, 6 y
// luego se han sumado estos resultados.
// Ahora realizaremos la operaciÃ³n 11 â€“ (resultado % 11)
// El resultado serÃ¡ un nÃºmero entre 1 y 11 . Si el nÃºmero es menor que 10 serÃ¡ ya el
// valor del DC. Pero si es 10 el DC serÃ¡ 1 y si es 11 serÃ¡ 0 . En este caso
// 11 â€“ (123 % 11) = 9 que serÃ¡ el DC de Entidad/sucursal.
// Para calcular el dÃ­gito de control de nÃºmero de cuenta corriente:
// Si este es, por ejemplo, el 0300731702 , para calcular su dÃ­gito de control se realiza la
// operaciÃ³n:
// 0*1 + 3*2 + 0*4 + 0*8 + 7*5 + 3*10 + 1*9 + 7*7 + 0*3 + 2*6 = 141
// Es decir, cada una de las cifras del nÃºmero de la cuenta, leÃ­das de izquierda a derecha,
// se han ido multiplicando por 1, 2, 4, 8, 5, 10, 9, 7, 3, 6 y luego se han sumado
// estos resultados.
// Realizaremos la misma operaciÃ³n que antes 11 â€“ (121 % 11) = 2 que serÃ¡ el DC de
// nÃºmero de cuenta.
// Algunas cuentas para poder probar son:
// 2085 0103 92 0300731702
// 2100 0721 09 0200601249
// 0049 0345 31 2710611698
// 2100 1162 43 0200084482
// 2100 1516 05 0200306484
// 2100 0811 79 0200947329
// 9182 5005 04 0201520831
// ðŸ‘‰Pista: El mÃ©todo dcCorrecto calcula el dÃ­gito de control de una string con N nÃºmeros a
// partir de un array de ponderaciones de tambiÃ©n N nÃºmeros. Y despuÃ©s comprueba el nÃºmero
// resultante, con el DC pasado como argumento, el mÃ©todo devolverÃ¡ true si los dÃ­gitos son
// iguales, false en caso contrario. Por tanto, este mÃ©todo serÃ¡ llamada en dos ocasiones: para
// los 8 nÃºmero anteriores a los 2 dÃ­gitos de control, y para los 10 nÃºmeros posteriores. Usando
// cada vez el array de ponderaciones correspondiente que se describen arriba.

namespace ejercicio4
{
  class Cuenta
    {
        private string titular;
        private double saldo;

        public Cuenta(in string numero, in string titular)
        {
            this.titular = titular;
            saldo = 0;
        }

        public void Ingreso(double cantidad)
        {
            saldo = cantidad;
            Console.Write($"Ingreso de {cantidad} euro/s: ");
        }

        public void Reintegro(double cantidad)
        {
            if (cantidad > saldo || cantidad == 0)
            {
                throw new SaldoInsuficienteException($"No puede hacer un reintegro de {cantidad} euros/s porque la suma es superior " +
                                                    "al saldo disponible.\nTampoco puede realizar un reintegro de 0 euros.");
            }
            else
            {
                Console.Write($"Reintegro de {cantidad} euro/s: ");
                saldo -= cantidad;
            }
        }

        public override string ToString()
        {
            string mensaje = $"{titular} su saldo actual es de {saldo} euro/s.";                   
            return mensaje;
        }
    }
}